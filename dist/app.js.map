{"version":3,"sources":["../server/app.js"],"names":["require","SocketServer","distribution","app","port","process","env","PORT","compiler","use","req","res","next","header","publicPath","output","historyApiFallback","stats","colors","sendFile","resolve","server","listen","err","console","error","log","NODE_ENV","SS","pm_id","clear","on","namespaceUser","of","namespaceCustomer","socket","_SCClientInfo","request","headers","cookie","clientInfo","JSON","parse","name","setClient","getClient","User","data","emit","removeClient","Customer"],"mappings":"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","file":"app.js","sourcesContent":["/* eslint no-console: 0 */\nimport express from 'express';\nimport path from 'path';\nimport webpack from 'webpack';\nimport webpackDevMiddleware from 'webpack-dev-middleware';\nimport webpackHotMiddleware from 'webpack-hot-middleware';\n\nimport config from '../webpack.config';\n\nrequire('dotenv/config');\n\nconst SocketServer = require('./socket');\nconst distribution = require('./distribution');\n\nconst app = express();\nconst port = process.env.PORT || 3030;\nconst compiler = webpack(config);\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  historyApiFallback: true,\n  stats: { colors: true },\n}));\n\napp.use(webpackHotMiddleware(compiler));\n\napp.use('*', (req, res) => {\n  res.sendFile(path.resolve('dist/index.html'));\n});\n\n/* listen */\n\nconst server = app.listen(port, (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('Server running on port', port, 'on', process.env.NODE_ENV);\n});\n\n/* socket */\n\nconst SS = new SocketServer({ server });\n\nif (process.env.pm_id === '0') {\n  distribution.clear();\n}\n\nSS.on('connection', () => {});\nconst namespaceUser = SS.of('/user');\nconst namespaceCustomer = SS.of('/customer');\n\nnamespaceUser.on('connection', async (socket) => {\n  /* Lendo o Cookie */\n  const { _SCClientInfo } = socket.request.headers.cookie;\n  const clientInfo = JSON.parse(_SCClientInfo);\n  console.log(`\\nUser Bot: ${clientInfo.name} está online. :)`);\n\n  /* Criando o registro no Redis */\n  await distribution.setClient(clientInfo);\n  const User = await distribution.getClient(clientInfo);\n  console.log(`\\nUser Bot: ${User.name} foi registrado. :)`);\n\n  socket.on('message', (data) => {\n    console.log(`\\nUser Bot: ${data.name} enviou uma mensagem.`);\n    namespaceCustomer.emit('message', data);\n    socket.emit('message', data);\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`\\nUser Bot: ${User.name} se desconectou. :(`);\n    if (distribution.removeClient(clientInfo)) {\n      console.log(`\\nUser Bot: ${User.name} teve seu registro removido. :)`);\n    }\n  });\n});\n\nnamespaceCustomer.on('connection', async (socket) => {\n  /* Lendo o Cookie */\n  const { _SCClientInfo } = socket.request.headers.cookie;\n  const clientInfo = JSON.parse(_SCClientInfo);\n  console.log(`\\nCustomer Bot: ${clientInfo.name} está online. :)`);\n\n  /* Criando o registro no Redis */\n  await distribution.setClient(clientInfo);\n  const Customer = await distribution.getClient(clientInfo);\n  console.log(`\\nCustomer Bot: ${Customer.name} foi registrado. :)`);\n\n  socket.on('message', (data) => {\n    console.log(`\\nCustomer Bot: ${data.name} enviou uma mensagem.`);\n    namespaceUser.emit('message', data);\n    socket.emit('message', data);\n  });\n\n  socket.on('disconnect', () => {\n    console.log(`\\nCustomer Bot: ${Customer.name} se desconectou. :(`);\n    if (distribution.removeClient(clientInfo)) {\n      console.log(`\\nCustomer Bot: ${Customer.name} teve seu registro removido. :)`);\n    }\n  });\n});\n"]}