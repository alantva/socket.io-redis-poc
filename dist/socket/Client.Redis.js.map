{"version":3,"sources":["../../server/socket/Client.Redis.js"],"names":["Redis","port","process","env","REDIS_PORT","host","REDIS_URL","get","data","id","type","Promise","resolve","reject","hgetall","err","result","set","name","hmset","remove","del","clear","keys","e","pipeline","forEach","key","exec","console","log"],"mappings":"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","file":"Client.Redis.js","sourcesContent":["import IORedis from 'ioredis';\n\nconst Redis = new IORedis({\n  port: process.env.REDIS_PORT,\n  host: process.env.REDIS_URL,\n});\n\nconst get = (data) => {\n  const { id, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.hgetall(`w-api:${type}:${id}`, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\nconst set = async (data) => {\n  const { id, name, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.hmset(`w-api:${type}:${id}`, [\n      'id',\n      id,\n      'name',\n      name,\n      'type',\n      type,\n    ], (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nconst remove = (data) => {\n  const { id, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.del(`w-api:${type}:${id}`, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nconst clear = () => new Promise((resolve, reject) => {\n  Redis.keys('w-api:*', (e, keys) => {\n    if (e) {\n      reject(e);\n    } else {\n      const pipeline = Redis.pipeline();\n      keys.forEach((key) => {\n        pipeline.del(key);\n      });\n      pipeline.exec((err) => {\n        if (err) {\n          reject(err);\n        } else {\n          console.log('Client.Redis: Redis clear!'); // eslint-disable-line\n          resolve();\n        }\n      });\n    }\n  });\n});\n\nexport {\n  set,\n  get,\n  remove,\n  clear,\n};\n"]}