{"version":3,"sources":["../../server/socket/Client.js"],"names":["saveRegister","socket","_SCClientInfo","request","headers","cookie","client","JSON","parse","socketID","id","console","log","type","toUpperCase","name","error","recoverRegister","recoveredClient","assignPartner","partner"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAe,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEjB;AACQC,yBAHS,GAGSD,OAAOE,OAAP,CAAeC,OAAf,CAAuBC,MAHhC,CAGTH,aAHS;AAIXI,kBAJW,GAIFC,KAAKC,KAAL,CAAWN,aAAX,CAJE;AAKjB;;AACAI,mBAAOG,QAAP,GAAkBR,OAAOS,EAAzB;AANiB;AAAA,mBAOX,iBAAUJ,MAAV,CAPW;;AAAA;AAQjBK,oBAAQC,GAAR,QAAiBN,OAAOO,IAAP,CAAYC,WAAZ,EAAjB,cAAmDR,OAAOS,IAA1D,0BARiB,CAQqE;AARrE,6CASVT,MATU;;AAAA;AAAA;AAAA;;AAWjBK,oBAAQK,KAAR,CAAc,qBAAd;AAXiB,6CAYV,IAZU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMC;AAAA,uFAAkB,kBAAOX,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGU,iBAAUA,MAAV,CAHV;;AAAA;AAGdY,2BAHc;;AAIpBP,oBAAQC,GAAR,QAAiBM,gBAAgBL,IAAhB,CAAqBC,WAArB,EAAjB,cAA4DI,gBAAgBH,IAA5E,0BAJoB,CAIoF;AAJpF,8CAKbG,eALa;;AAAA;AAAA;AAAA;;AAOpBP,oBAAQK,KAAR,CAAc,wBAAd;AAPoB,8CAQb,IARa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAYA,IAAMG;AAAA,uFAAgB,kBAAOb,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdI,cAFc;AAGdG,gBAHc;AAAA,2BAIVP,OAAOO,IAJG;AAAA,8CAKX,MALW,wBAUX,UAVW;AAAA;;AAAA;AAMdA,mBAAO,UAAP;AANc;AAAA,mBAOH,gBAAS,EAAEA,UAAF,EAAT,CAPG;;AAAA;AAOdH,cAPc;AAAA;;AAAA;AAWdG,mBAAO,MAAP;AAXc;AAAA,mBAYH,gBAAS,EAAEA,UAAF,EAAT,CAZG;;AAAA;AAYdH,cAZc;AAAA;;AAAA;AAAA,gBAiBbA,EAjBa;AAAA;AAAA;AAAA;;AAAA,8CAkBT,IAlBS;;AAAA;AAAA;AAAA,mBAoBIO,gBAAgB,EAAEP,MAAF,EAAMG,UAAN,EAAhB,CApBJ;;AAAA;AAoBZO,mBApBY;;AAAA,gBAqBbA,OArBa;AAAA;AAAA;AAAA;;AAAA,8CAsBT,IAtBS;;AAAA;AAAA,8CAwBXA,OAxBW;;AAAA;AAAA;AAAA;;AA0BlBT,oBAAQK,KAAR,CAAc,qBAAd;AA1BkB,8CA2BX,IA3BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAgCEhB,Y,GAAAA,Y;QACAiB,e,GAAAA,e;QACAE,a,GAAAA,a;;;;;;;;gCA9DInB,Y;;gCAgBAiB,e;;gCAYAE,a","file":"Client.js","sourcesContent":["import { set as ClientSet, get as ClientGet } from './Client.Redis';\nimport { pop as QueuePop } from './Queue.Redis';\n\nconst saveRegister = async (socket) => {\n  try {\n    /* Lendo o Cookie */\n    const { _SCClientInfo } = socket.request.headers.cookie;\n    const client = JSON.parse(_SCClientInfo);\n    /* Criando o registro no Redis */\n    client.socketID = socket.id;\n    await ClientSet(client);\n    console.log(`\\n${client.type.toUpperCase()} Bot: ${client.name} foi registrado. :)`); // eslint-disable-line\n    return client;\n  } catch (err) {\n    console.error('Client.saveRegister', err);\n    return null;\n  }\n};\n\nconst recoverRegister = async (client) => {\n  try {\n    /* Recuperando o registro no Redis */\n    const recoveredClient = await ClientGet(client);\n    console.log(`\\n${recoveredClient.type.toUpperCase()} Bot: ${recoveredClient.name} foi recuperado. :)`); // eslint-disable-line\n    return recoveredClient;\n  } catch (err) {\n    console.error('Client.recoverRegister', err);\n    return null;\n  }\n};\n\nconst assignPartner = async (client) => {\n  try {\n    let id;\n    let type;\n    switch (client.type) {\n      case 'user': {\n        type = 'customer';\n        id = await QueuePop({ type });\n        break;\n      }\n      case 'customer': {\n        type = 'user';\n        id = await QueuePop({ type });\n        break;\n      }\n      default:\n    }\n    if (!id) {\n      return null;\n    }\n    const partner = await recoverRegister({ id, type });\n    if (!partner) {\n      return null;\n    }\n    return partner;\n  } catch (err) {\n    console.error('Client.assignClient', err);\n    return null;\n  }\n};\n\nexport {\n  saveRegister,\n  recoverRegister,\n  assignPartner,\n};\n"]}