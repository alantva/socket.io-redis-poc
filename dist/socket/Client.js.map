{"version":3,"sources":["../../server/socket/Client.js"],"names":["saveRegister","socket","_SCClientInfo","request","headers","cookie","client","JSON","parse","socketID","id","console","log","type","toUpperCase","name","error","recoverRegister","recoveredClient","assignPartners","partner","assignToRoom","clients","roomID","Promise","all","map"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA;AAAA,sFAAe,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEjB;AACQC,yBAHS,GAGSD,OAAOE,OAAP,CAAeC,OAAf,CAAuBC,MAHhC,CAGTH,aAHS;AAIXI,kBAJW,GAIFC,KAAKC,KAAL,CAAWN,aAAX,CAJE;AAKjB;;AACAI,mBAAOG,QAAP,GAAkBR,OAAOS,EAAzB;AANiB;AAAA,mBAOX,iBAAUJ,MAAV,CAPW;;AAAA;AAQjBK,oBAAQC,GAAR,QAAiBN,OAAOO,IAAP,CAAYC,WAAZ,EAAjB,cAAmDR,OAAOS,IAA1D,0BARiB,CAQqE;AARrE,6CASVT,MATU;;AAAA;AAAA;AAAA;;AAWjBK,oBAAQK,KAAR,CAAc,qBAAd;AAXiB,6CAYV,IAZU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAgBA,IAAMC;AAAA,uFAAkB,kBAAOX,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGU,iBAAUA,MAAV,CAHV;;AAAA;AAGdY,2BAHc;;AAIpBP,oBAAQC,GAAR,QAAiBM,gBAAgBL,IAAhB,CAAqBC,WAArB,EAAjB,cAA4DI,gBAAgBH,IAA5E,0BAJoB,CAIoF;AAJpF,8CAKbG,eALa;;AAAA;AAAA;AAAA;;AAOpBP,oBAAQK,KAAR,CAAc,wBAAd;AAPoB,8CAQb,IARa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAYA,IAAMG;AAAA,uFAAiB,kBAAOb,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfI,cAFe;AAGfG,gBAHe;AAAA,2BAIXP,OAAOO,IAJI;AAAA,8CAKZ,MALY,wBAUZ,UAVY;AAAA;;AAAA;AAMfA,mBAAO,UAAP;AANe;AAAA,mBAOJ,gBAAS,EAAEA,UAAF,EAAT,CAPI;;AAAA;AAOfH,cAPe;AAAA;;AAAA;AAWfG,mBAAO,MAAP;AAXe;AAAA,mBAYJ,gBAAS,EAAEA,UAAF,EAAT,CAZI;;AAAA;AAYfH,cAZe;AAAA;;AAAA;AAAA,gBAiBdA,EAjBc;AAAA;AAAA;AAAA;;AAAA,8CAkBV,IAlBU;;AAAA;AAAA;AAAA,mBAoBGO,gBAAgB,EAAEP,MAAF,EAAMG,UAAN,EAAhB,CApBH;;AAAA;AAoBbO,mBApBa;AAAA,8CAqBZA,OArBY;;AAAA;AAAA;AAAA;;AAuBnBT,oBAAQK,KAAR,CAAc,qBAAd;AAvBmB,8CAwBZ,IAxBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA4BA,IAAMK;AAAA,uFAAe,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEI,eAAQ,EAAEA,gBAAF,EAAR,CAFJ;;AAAA;AAEXC,kBAFW;AAAA;AAAA,mBAGXC,QAAQC,GAAR,CAAYH,QAAQI,GAAR,CAAY,UAACpB,MAAD,EAAY;AACxCA,qBAAOiB,MAAP,GAAgBA,MAAhB,CADwC,CAChB;AACxB,qBAAO,iBAAUjB,MAAV,CAAP;AACD,aAHiB,CAAZ,CAHW;;AAAA;AAAA,8CAOV,EAAEiB,cAAF,EAPU;;AAAA;AAAA;AAAA;;AASjBZ,oBAAQK,KAAR,CAAc,qBAAd;AATiB,8CAUV,KAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAeEhB,Y,GAAAA,Y;QACAiB,e,GAAAA,e;QACAE,c,GAAAA,c;QACAE,Y,GAAAA,Y;;;;;;;;gCA1EIrB,Y;;gCAgBAiB,e;;gCAYAE,c;;gCA4BAE,Y","file":"Client.js","sourcesContent":["import { set as ClientSet, get as ClientGet } from './Client.Redis';\nimport { pop as QueuePop } from './Queue.Redis';\nimport { set as RoomSet } from './Room.Redis';\n\nconst saveRegister = async (socket) => {\n  try {\n    /* Lendo o Cookie */\n    const { _SCClientInfo } = socket.request.headers.cookie;\n    const client = JSON.parse(_SCClientInfo);\n    /* Criando o registro no Redis */\n    client.socketID = socket.id;\n    await ClientSet(client);\n    console.log(`\\n${client.type.toUpperCase()} BOT: ${client.name} foi registrado. :)`); // eslint-disable-line\n    return client;\n  } catch (err) {\n    console.error('Client.saveRegister', err);\n    return null;\n  }\n};\n\nconst recoverRegister = async (client) => {\n  try {\n    /* Recuperando o registro no Redis */\n    const recoveredClient = await ClientGet(client);\n    console.log(`\\n${recoveredClient.type.toUpperCase()} BOT: ${recoveredClient.name} foi recuperado. :)`); // eslint-disable-line\n    return recoveredClient;\n  } catch (err) {\n    console.error('Client.recoverRegister', err);\n    return null;\n  }\n};\n\nconst assignPartners = async (client) => {\n  try {\n    let id;\n    let type;\n    switch (client.type) {\n      case 'user': {\n        type = 'customer';\n        id = await QueuePop({ type });\n        break;\n      }\n      case 'customer': {\n        type = 'user';\n        id = await QueuePop({ type });\n        break;\n      }\n      default:\n    }\n    if (!id) {\n      return null;\n    }\n    const partner = await recoverRegister({ id, type });\n    return partner;\n  } catch (err) {\n    console.error('Client.assignClient', err);\n    return null;\n  }\n};\n\nconst assignToRoom = async (clients) => {\n  try {\n    const roomID = await RoomSet({ clients });\n    await Promise.all(clients.map((client) => {\n      client.roomID = roomID; // eslint-disable-line\n      return ClientSet(client);\n    }));\n    return { roomID };\n  } catch (err) {\n    console.error('Client.assignToRoom', err);\n    return false;\n  }\n};\n\nexport {\n  saveRegister,\n  recoverRegister,\n  assignPartners,\n  assignToRoom,\n};\n"]}