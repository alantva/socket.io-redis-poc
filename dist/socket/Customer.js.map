{"version":3,"sources":["../../server/socket/Customer.js"],"names":["module","exports","namespaces","customer","on","socket","client","partner","data","console","log","name","user","to","socketID","emit"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;AAKAA,OAAOC,OAAP,GAAiB,UAACC,UAAD,EAAgB;AAC/BA,aAAWC,QAAX,CAAoBC,EAApB,CAAuB,YAAvB;AAAA,wFAAqC,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEd,2BAAmBA,MAAnB,CAFc;;AAAA;AAE7BC,oBAF6B;AAAA;AAAA,qBAI7B,iBAAUA,MAAV,CAJ6B;;AAAA;AAAA;AAAA,qBAMb,4BAAoBA,MAApB,CANa;;AAAA;AAM7BC,qBAN6B;;AAAA,mBAQ/BA,OAR+B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAU3B,mBAAYD,MAAZ,CAV2B;;AAAA;;AAYjCD,qBAAOD,EAAP,CAAU,SAAV,EAAqB,UAACI,IAAD,EAAU;AAC7BC,wBAAQC,GAAR,sBAA+BJ,OAAOK,IAAtC,4BAD6B,CACuC;AACpET,2BAAWU,IAAX,CAAgBC,EAAhB,CAAmBN,QAAQO,QAA3B,EAAqCC,IAArC,CAA0C,SAA1C,EAAqDP,IAArD,EAA2D,YAAM;AAC/DC,0BAAQC,GAAR,CAAY,MAAZ,EAD+D,CAC1C;AACtB,iBAFD;AAGAL,uBAAOU,IAAP,CAAY,SAAZ,EAAuBP,IAAvB,EAA6B,YAAM;AACjCC,0BAAQC,GAAR,CAAY,OAAZ,EADiC,CACX;AACvB,iBAFD;AAGD,eARD;;AAZiC;;AAuBnCL,qBAAOD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BK,wBAAQC,GAAR,sBAA+BJ,OAAOK,IAAtC,0BAD4B,CACsC;AAClE,oBAAI,oBAAaL,MAAb,CAAJ,EAA0B;AACxBG,0BAAQC,GAAR,sBAA+BJ,OAAOK,IAAtC,sCADwB,CACsD;AAC/E;AACD,oBAAI,mBAAYL,MAAZ,CAAJ,EAAyB;AACvBG,0BAAQC,GAAR,sBAA+BJ,OAAOK,IAAtC,8CADuB,CAC+D;AACvF;AACF,eARD;;AAvBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArC;;AAAA;AAAA;AAAA;AAAA;AAiCD,CAlCD","file":"Customer.js","sourcesContent":["import { remove as ClientRemove } from './Client.Redis';\nimport { push as QueuePush, remove as QueueRemove } from './Queue.Redis';\nimport {\n  saveRegister as ClientSaveRegister,\n  assignPartner as ClientAssignPartner,\n} from './Client';\n\nmodule.exports = (namespaces) => {\n  namespaces.customer.on('connection', async (socket) => {\n    /* Register a client */\n    const client = await ClientSaveRegister(socket);\n    /* Assign the client to a queue */\n    await QueuePush(client);\n    /* Assign the client to a partner */\n    const partner = await ClientAssignPartner(client);\n\n    if (partner) {\n      /* Unassign the client to a queue */\n      await QueueRemove(client);\n\n      socket.on('message', (data) => {\n        console.log(`\\nCUSTOMER Bot: ${client.name} enviou uma mensagem.`); // eslint-disable-line\n        namespaces.user.to(partner.socketID).emit('message', data, () => {\n          console.log('PAU!'); // eslint-disable-line\n        });\n        socket.emit('message', data, () => {\n          console.log('PIRU!'); // eslint-disable-line\n        });\n      });\n    }\n\n    socket.on('disconnect', () => {\n      console.log(`\\nCUSTOMER Bot: ${client.name} se desconectou. :(`); // eslint-disable-line\n      if (ClientRemove(client)) {\n        console.log(`\\nCUSTOMER Bot: ${client.name} teve seu registro removido. :)`); // eslint-disable-line\n      }\n      if (QueueRemove(client)) {\n        console.log(`\\nCUSTOMER Bot: ${client.name} teve seu registro removido da fila. :)`); // eslint-disable-line\n      }\n    });\n  });\n};\n"]}