{"version":3,"sources":["../server/distribution.js"],"names":["Redis","port","process","env","REDIS_PORT","host","REDIS_URL","getClient","data","id","type","Promise","resolve","reject","hgetall","err","result","setClient","name","hmset","removeClient","del","clear","keys","pipeline","forEach","key","exec","err2","console","log"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,QAAQ,sBAAY;AACxBC,QAAMC,QAAQC,GAAR,CAAYC,UADM;AAExBC,QAAMH,QAAQC,GAAR,CAAYG;AAFM,CAAZ,CAAd;;AAKA,IAAMC,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAU;AAAA,MAClBC,EADkB,GACLD,IADK,CAClBC,EADkB;AAAA,MACdC,IADc,GACLF,IADK,CACdE,IADc;;AAE1B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCb,UAAMc,OAAN,YAAuBJ,IAAvB,SAA+BD,EAA/B,EAAqC,UAACM,GAAD,EAAMC,MAAN,EAAiB;AACpD,UAAID,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD,OAFD,MAEO;AACLH,gBAAQI,MAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAXD;AAYA,IAAMC;AAAA,sFAAY,iBAAOT,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,cADQ,GACWD,IADX,CACRC,EADQ,EACJS,IADI,GACWV,IADX,CACJU,IADI,EACER,IADF,GACWF,IADX,CACEE,IADF;AAAA,6CAET,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCb,oBAAMmB,KAAN,YAAqBT,IAArB,SAA6BD,EAA7B,EAAmC,IAAnC,EAAyCA,EAAzC,EAA6C,MAA7C,EAAqDS,IAArD,EAA2D,UAACH,GAAD,EAAS;AAClE,oBAAIA,GAAJ,EAAS;AACPF,yBAAOE,GAAP;AACD,iBAFD,MAEO;AACLH;AACD;AACF,eAND;AAOD,aARM,CAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;AAYA,IAAMQ,eAAe,SAAfA,YAAe,CAACZ,IAAD,EAAU;AAAA,MACrBC,EADqB,GACRD,IADQ,CACrBC,EADqB;AAAA,MACjBC,IADiB,GACRF,IADQ,CACjBE,IADiB;;AAE7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCb,UAAMqB,GAAN,YAAmBX,IAAnB,SAA2BD,EAA3B,EAAiC,UAACM,GAAD,EAAS;AACxC,UAAIA,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD,OAFD,MAEO;AACLH;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAXD;AAYA,IAAMU,QAAQ,SAARA,KAAQ;AAAA,SAAM,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnDb,UAAMuB,IAAN,CAAW,SAAX,EAAsB,UAACR,GAAD,EAAMQ,IAAN,EAAe;AACnC,UAAIR,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD,OAFD,MAEO;AACL,YAAMS,WAAWxB,MAAMwB,QAAN,EAAjB;AACAD,aAAKE,OAAL,CAAa,UAACC,GAAD,EAAS;AACpBF,mBAASH,GAAT,CAAaK,GAAb;AACD,SAFD;AAGAF,iBAASG,IAAT,CAAc,UAACC,IAAD,EAAU;AACtB,cAAIb,GAAJ,EAAS;AACPF,mBAAOe,IAAP;AACD,WAFD,MAEO;AACLC,oBAAQC,GAAR,CAAY,4BAAZ;AACAlB;AACD;AACF,SAPD;AAQD;AACF,KAjBD;AAkBD,GAnBmB,CAAN;AAAA,CAAd;;QAsBEK,S,GAAAA,S;QACAV,S,GAAAA,S;QACAa,Y,GAAAA,Y;QACAE,K,GAAAA,K;;;;;;;;gCAlEItB,K;;gCAKAO,S;;gCAYAU,S;;gCAYAG,Y;;gCAYAE,K","file":"distribution.js","sourcesContent":["import IORedis from 'ioredis';\n\nconst Redis = new IORedis({\n  port: process.env.REDIS_PORT,\n  host: process.env.REDIS_URL,\n});\n\nconst getClient = (data) => {\n  const { id, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.hgetall(`w-api:${type}:${id}`, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n};\nconst setClient = async (data) => {\n  const { id, name, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.hmset(`w-api:${type}:${id}`, 'id', id, 'name', name, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nconst removeClient = (data) => {\n  const { id, type } = data;\n  return new Promise((resolve, reject) => {\n    Redis.del(`w-api:${type}:${id}`, (err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nconst clear = () => new Promise((resolve, reject) => {\n  Redis.keys('w-api:*', (err, keys) => {\n    if (err) {\n      reject(err);\n    } else {\n      const pipeline = Redis.pipeline();\n      keys.forEach((key) => {\n        pipeline.del(key);\n      });\n      pipeline.exec((err2) => {\n        if (err) {\n          reject(err2);\n        } else {\n          console.log('Distribution: Redis clear!');\n          resolve();\n        }\n      });\n    }\n  });\n});\n\nexport {\n  setClient,\n  getClient,\n  removeClient,\n  clear,\n};\n"]}